version: "3.6"

services:

  mlflow-db:
    image: postgres:14
    container_name: cms_mlflow-db
    restart: always
    networks:
      - cogstack-model-serve_cms
    environment:
      - POSTGRES_DB=mlflow-backend-store
      - POSTGRES_USER=$MLFLOW_DB_USERNAME
      - POSTGRES_PASSWORD=$MLFLOW_DB_PASSWORD
    volumes:
      - mlflow-backend-store:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 60s
      timeout: 20s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2022-06-30T20-58-09Z
    container_name: cms_minio
    restart: always
    networks:
      - cogstack-model-serve_cms
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=$AWS_ACCESS_KEY_ID
      - MINIO_ROOT_PASSWORD=$AWS_SECRET_ACCESS_KEY
      - NO_PROXY=localhost
      - no_proxy=localhost
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      timeout: 20s
      retries: 3
    expose:
      - 9000
      - 9001

  model-bucket-init:
    image: minio/mc:RELEASE.2022-06-26T18-51-48Z
    restart: on-failure
    networks:
      - cogstack-model-serve_cms
    environment:
      - MINIO_USERNAME=$AWS_ACCESS_KEY_ID
      - MINIO_PASSWORD=$AWS_SECRET_ACCESS_KEY
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add cms_minio http://minio:9000 $${MINIO_USERNAME} $${MINIO_PASSWORD};
      if ! /usr/bin/mc ls cms_minio/cms-model-bucket 2>/dev/null; then
        /usr/bin/mc mb cms_minio/cms-model-bucket;
      fi
      "
    depends_on:
      - minio

  mlflow-ui:
    build:
      context: ./
      dockerfile: ./docker/mlflow/server/Dockerfile
      args:
        - HTTP_PROXY=$HTTP_PROXY
        - HTTPS_PROXY=$HTTPS_PROXY
        - NO_PROXY=$NO_PROXY
    container_name: cms_mlflow-ui
    restart: always
    networks:
      - cogstack-model-serve_cms
    volumes:
      - mlflow-home:/opt/mlflow
    environment:
      - MLFLOW_DB_USERNAME=$MLFLOW_DB_USERNAME
      - MLFLOW_DB_PASSWORD=$MLFLOW_DB_PASSWORD
      - MLFLOW_BACKEND_STORE_URI=postgresql://$MLFLOW_DB_USERNAME:$MLFLOW_DB_PASSWORD@cms_mlflow-db:5432/mlflow-backend-store
      - MLFLOW_TRACKING_URI=http://localhost:5000
      - ARTIFACTS_DESTINATION=s3://cms-model-bucket
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - MLFLOW_BASIC_AUTH_ENABLED=false
      - MLFLOW_AUTH_CONFIG_PATH=/opt/auth/basic_auth.ini
      - MLFLOW_SERVER_DEBUG=true
      - MLFLOW_DEPLOYMENTS_TARGET= #http://mlflow-deployments:7000
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - HTTP_PROXY=$HTTP_PROXY
      - HTTPS_PROXY=$HTTPS_PROXY
      - NO_PROXY=minio,mlflow-deployments,localhost
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=minio,mlflow-deployments,localhost
    expose:
      - 5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 60s
      timeout: 20s
      retries: 3
    depends_on:
      mlflow-db:
        condition: "service_healthy"
      minio:
        condition: "service_healthy"
      model-bucket-init:
        condition: "service_completed_successfully"

  mlflow-deployments:
    build:
      context: ./
      dockerfile: ./docker/mlflow/deployments/Dockerfile
      args:
        - HTTP_PROXY=$HTTP_PROXY
        - HTTPS_PROXY=$HTTPS_PROXY
        - NO_PROXY=$NO_PROXY
    profiles:
      - wip
    container_name: cms_mlflow-deployments
    restart: always
    networks:
      - cogstack-model-serve_cms
    environment:
      - OPENAI_API_KEY=$OPENAI_API_KEY
      - HTTP_PROXY=$HTTP_PROXY
      - HTTPS_PROXY=$HTTPS_PROXY
      - NO_PROXY=localhost
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=localhost
    expose:
      - 7000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7000/health" ]
      interval: 60s
      timeout: 20s
      retries: 3

  mlflow-models:
    build:
      context: ./
      dockerfile: ./docker/mlflow/models/Dockerfile
      args:
        - MLFLOW_MODEL_NAME=$MLFLOW_MODEL_NAME
        - ARCH=${ARCH:-amd64}
        - HTTP_PROXY=$HTTP_PROXY
        - HTTPS_PROXY=$HTTPS_PROXY
        - NO_PROXY=$NO_PROXY
    profiles:
      - wip
    container_name: cms_mlflow-${MODEL_NAME:-model}
    restart: always
    networks:
      - cogstack-model-serve_cms
    environment:
      - HTTP_PROXY=$HTTP_PROXY
      - HTTPS_PROXY=$HTTPS_PROXY
      - NO_PROXY=localhost
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=localhost
    expose:
      - 8000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/ping" ]
      interval: 60s
      timeout: 20s
      retries: 3


volumes:
  mlflow-backend-store:
    driver: local
  mlflow-home:
    driver: local
  minio-data:
    driver: local

networks:
  cogstack-model-serve_cms:
    external: true
