{
    "openapi": "3.1.0",
    "info": {
        "title": "CogStack ModelServe",
        "summary": "A model serving and governance system for CogStack NLP solutions",
        "version": "0.1.0"
    },
    "paths": {
        "/info": {
            "get": {
                "tags": [
                    "Metadata"
                ],
                "summary": "Get Model Card",
                "description": "Get information about the model being served",
                "operationId": "get_model_card",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelCard"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/generate": {
            "post": {
                "tags": [
                    "Generate text based on the input prompt"
                ],
                "summary": "Generate Text",
                "description": "Generate text",
                "operationId": "generate_text",
                "parameters": [
                    {
                        "name": "max_tokens",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "exclusiveMinimum": 0,
                            "description": "The maximum number of tokens to generate",
                            "default": 512,
                            "title": "Max Tokens"
                        },
                        "description": "The maximum number of tokens to generate"
                    },
                    {
                        "name": "temperature",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "exclusiveMaximum": 1.0,
                            "exclusiveMinimum": 0.0,
                            "description": "The temperature of the generated text",
                            "default": 0.7,
                            "title": "Temperature"
                        },
                        "description": "The temperature of the generated text"
                    },
                    {
                        "name": "tracking_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tracking ID of the requested task",
                            "title": "Tracking Id"
                        },
                        "description": "The tracking ID of the requested task"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string",
                                "description": "The prompt to be sent to the model",
                                "title": "Prompt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stream/generate": {
            "post": {
                "tags": [
                    "Generate text based on the input prompt"
                ],
                "summary": "Generate Text Stream",
                "description": "Generate a stream of texts",
                "operationId": "generate_text_stream",
                "parameters": [
                    {
                        "name": "max_tokens",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "exclusiveMinimum": 0,
                            "description": "The maximum number of tokens to generate",
                            "default": 512,
                            "title": "Max Tokens"
                        },
                        "description": "The maximum number of tokens to generate"
                    },
                    {
                        "name": "temperature",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "exclusiveMaximum": 1.0,
                            "exclusiveMinimum": 0.0,
                            "description": "The temperature of the generated text",
                            "default": 0.7,
                            "title": "Temperature"
                        },
                        "description": "The temperature of the generated text"
                    },
                    {
                        "name": "tracking_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tracking ID of the requested task",
                            "title": "Tracking Id"
                        },
                        "description": "The tracking ID of the requested task"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string",
                                "description": "The prompt to be sent to the model",
                                "title": "Prompt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/chat/completions": {
            "post": {
                "tags": [
                    "OpenAICompatible"
                ],
                "summary": "Generate Chat Completions",
                "description": "Generate chat response based on messages, similar to OpenAI's /v1/chat/completions",
                "operationId": "generate_chat_completions",
                "parameters": [
                    {
                        "name": "tracking_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tracking ID of the requested task",
                            "title": "Tracking Id"
                        },
                        "description": "The tracking ID of the requested task"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpenAIChatRequest",
                                "description": "OpenAI-like completion request"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/embeddings": {
            "post": {
                "tags": [
                    "OpenAICompatible"
                ],
                "summary": "Embed Texts",
                "description": "Create embeddings based on text(s), similar to OpenAI's /v1/embeddings endpoint",
                "operationId": "embed_texts",
                "parameters": [
                    {
                        "name": "tracking_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tracking ID of the requested task",
                            "title": "Tracking Id"
                        },
                        "description": "The tracking ID of the requested task"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OpenAIEmbeddingsRequest",
                                "description": "Text(s) to be embedded"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "ModelCard": {
                "properties": {
                    "api_version": {
                        "type": "string",
                        "title": "Api Version",
                        "description": "The version of the model serve APIs"
                    },
                    "model_type": {
                        "$ref": "#/components/schemas/ModelType",
                        "description": "The type of the served model"
                    },
                    "model_description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Description",
                        "description": "The description about the served model"
                    },
                    "model_card": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Card",
                        "description": "The metadata of the served model"
                    },
                    "labels": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Labels",
                        "description": "The mapping of CUIs to names"
                    }
                },
                "type": "object",
                "required": [
                    "api_version",
                    "model_type"
                ],
                "title": "ModelCard"
            },
            "ModelType": {
                "type": "string",
                "enum": [
                    "medcat_snomed",
                    "medcat_umls",
                    "medcat_icd10",
                    "medcat_opcs4",
                    "medcat_deid",
                    "anoncat",
                    "transformers_deid",
                    "huggingface_ner",
                    "huggingface_llm"
                ],
                "title": "ModelType"
            },
            "OpenAIChatRequest": {
                "properties": {
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/PromptMessage"
                        },
                        "type": "array",
                        "title": "Messages",
                        "description": "A list of messages to be sent to the model"
                    },
                    "stream": {
                        "type": "boolean",
                        "title": "Stream",
                        "description": "Whether to stream the response"
                    },
                    "max_tokens": {
                        "type": "integer",
                        "exclusiveMinimum": 0.0,
                        "title": "Max Tokens",
                        "description": "The maximum number of tokens to generate",
                        "default": 512
                    },
                    "model": {
                        "type": "string",
                        "title": "Model",
                        "description": "The name of the model used for generating the completion"
                    },
                    "temperature": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Temperature",
                        "description": "The temperature of the generated text",
                        "default": 0.7
                    }
                },
                "type": "object",
                "required": [
                    "messages",
                    "stream",
                    "model"
                ],
                "title": "OpenAIChatRequest"
            },
            "OpenAIEmbeddingsRequest": {
                "properties": {
                    "input": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ],
                        "title": "Input",
                        "description": "Input text or list of texts to embed"
                    },
                    "model": {
                        "type": "string",
                        "title": "Model",
                        "description": "The name of the model used for creating the embeddings"
                    }
                },
                "type": "object",
                "required": [
                    "input",
                    "model"
                ],
                "title": "OpenAIEmbeddingsRequest"
            },
            "PromptMessage": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/PromptRole",
                        "description": "The role who generates the message"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content",
                        "description": "The actual text of the message"
                    }
                },
                "type": "object",
                "required": [
                    "role",
                    "content"
                ],
                "title": "PromptMessage"
            },
            "PromptRole": {
                "type": "string",
                "enum": [
                    "system",
                    "user",
                    "assistant",
                    "tool"
                ],
                "title": "PromptRole"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    },
    "tags": [
        {
            "name": "Metadata",
            "description": "Get the model card"
        },
        {
            "name": "Generative",
            "description": "Generate text based on the input prompt"
        }
    ]
}